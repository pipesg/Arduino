
optiboot_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00001e00  00001e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  00000236  2**0
                  CONTENTS, READONLY
  2 .stab         00000ae0  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008a7  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001e00 <main>:
    1e00:	11 24       	eor	r1, r1
    1e02:	8f e5       	ldi	r24, 0x5F	; 95
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	9e bf       	out	0x3e, r25	; 62
    1e08:	8d bf       	out	0x3d, r24	; 61
    1e0a:	84 b7       	in	r24, 0x34	; 52
    1e0c:	14 be       	out	0x34, r1	; 52
    1e0e:	81 ff       	sbrs	r24, 1
    1e10:	e3 d0       	rcall	.+454    	; 0x1fd8 <appStart>
    1e12:	85 e0       	ldi	r24, 0x05	; 5
    1e14:	8e bd       	out	0x2e, r24	; 46
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	8b b9       	out	0x0b, r24	; 11
    1e1a:	88 e1       	ldi	r24, 0x18	; 24
    1e1c:	8a b9       	out	0x0a, r24	; 10
    1e1e:	86 e8       	ldi	r24, 0x86	; 134
    1e20:	80 bd       	out	0x20, r24	; 32
    1e22:	80 e1       	ldi	r24, 0x10	; 16
    1e24:	89 b9       	out	0x09, r24	; 9
    1e26:	8e e0       	ldi	r24, 0x0E	; 14
    1e28:	c4 d0       	rcall	.+392    	; 0x1fb2 <watchdogConfig>
    1e2a:	bd 9a       	sbi	0x17, 5	; 23
    1e2c:	26 e0       	ldi	r18, 0x06	; 6
    1e2e:	80 e3       	ldi	r24, 0x30	; 48
    1e30:	9c ef       	ldi	r25, 0xFC	; 252
    1e32:	54 e0       	ldi	r21, 0x04	; 4
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	9d bd       	out	0x2d, r25	; 45
    1e38:	8c bd       	out	0x2c, r24	; 44
    1e3a:	58 bf       	out	0x38, r21	; 56
    1e3c:	08 b6       	in	r0, 0x38	; 56
    1e3e:	02 fe       	sbrs	r0, 2
    1e40:	fd cf       	rjmp	.-6      	; 0x1e3c <main+0x3c>
    1e42:	38 b3       	in	r19, 0x18	; 24
    1e44:	34 27       	eor	r19, r20
    1e46:	38 bb       	out	0x18, r19	; 24
    1e48:	a8 95       	wdr
    1e4a:	21 50       	subi	r18, 0x01	; 1
    1e4c:	a1 f7       	brne	.-24     	; 0x1e36 <main+0x36>
    1e4e:	81 2c       	mov	r8, r1
    1e50:	91 2c       	mov	r9, r1
    1e52:	dd 24       	eor	r13, r13
    1e54:	d3 94       	inc	r13
    1e56:	95 e0       	ldi	r25, 0x05	; 5
    1e58:	c9 2e       	mov	r12, r25
    1e5a:	21 e1       	ldi	r18, 0x11	; 17
    1e5c:	b2 2e       	mov	r11, r18
    1e5e:	33 e0       	ldi	r19, 0x03	; 3
    1e60:	f3 2e       	mov	r15, r19
    1e62:	a0 d0       	rcall	.+320    	; 0x1fa4 <getch>
    1e64:	81 34       	cpi	r24, 0x41	; 65
    1e66:	89 f4       	brne	.+34     	; 0x1e8a <main+0x8a>
    1e68:	9d d0       	rcall	.+314    	; 0x1fa4 <getch>
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	a6 d0       	rcall	.+332    	; 0x1fba <verifySpace>
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	82 38       	cpi	r24, 0x82	; 130
    1e72:	19 f4       	brne	.+6      	; 0x1e7a <main+0x7a>
    1e74:	84 e0       	ldi	r24, 0x04	; 4
    1e76:	92 d0       	rcall	.+292    	; 0x1f9c <putch>
    1e78:	8e c0       	rjmp	.+284    	; 0x1f96 <main+0x196>
    1e7a:	81 38       	cpi	r24, 0x81	; 129
    1e7c:	19 f4       	brne	.+6      	; 0x1e84 <main+0x84>
    1e7e:	84 e0       	ldi	r24, 0x04	; 4
    1e80:	8d d0       	rcall	.+282    	; 0x1f9c <putch>
    1e82:	89 c0       	rjmp	.+274    	; 0x1f96 <main+0x196>
    1e84:	83 e0       	ldi	r24, 0x03	; 3
    1e86:	8a d0       	rcall	.+276    	; 0x1f9c <putch>
    1e88:	86 c0       	rjmp	.+268    	; 0x1f96 <main+0x196>
    1e8a:	82 34       	cpi	r24, 0x42	; 66
    1e8c:	19 f4       	brne	.+6      	; 0x1e94 <main+0x94>
    1e8e:	84 e1       	ldi	r24, 0x14	; 20
    1e90:	9c d0       	rcall	.+312    	; 0x1fca <getNch>
    1e92:	81 c0       	rjmp	.+258    	; 0x1f96 <main+0x196>
    1e94:	85 34       	cpi	r24, 0x45	; 69
    1e96:	19 f4       	brne	.+6      	; 0x1e9e <main+0x9e>
    1e98:	85 e0       	ldi	r24, 0x05	; 5
    1e9a:	97 d0       	rcall	.+302    	; 0x1fca <getNch>
    1e9c:	7c c0       	rjmp	.+248    	; 0x1f96 <main+0x196>
    1e9e:	85 35       	cpi	r24, 0x55	; 85
    1ea0:	49 f4       	brne	.+18     	; 0x1eb4 <main+0xb4>
    1ea2:	80 d0       	rcall	.+256    	; 0x1fa4 <getch>
    1ea4:	88 2e       	mov	r8, r24
    1ea6:	7e d0       	rcall	.+252    	; 0x1fa4 <getch>
    1ea8:	91 2c       	mov	r9, r1
    1eaa:	98 2a       	or	r9, r24
    1eac:	88 0c       	add	r8, r8
    1eae:	99 1c       	adc	r9, r9
    1eb0:	84 d0       	rcall	.+264    	; 0x1fba <verifySpace>
    1eb2:	71 c0       	rjmp	.+226    	; 0x1f96 <main+0x196>
    1eb4:	86 35       	cpi	r24, 0x56	; 86
    1eb6:	29 f4       	brne	.+10     	; 0x1ec2 <main+0xc2>
    1eb8:	84 e0       	ldi	r24, 0x04	; 4
    1eba:	87 d0       	rcall	.+270    	; 0x1fca <getNch>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	6e d0       	rcall	.+220    	; 0x1f9c <putch>
    1ec0:	6a c0       	rjmp	.+212    	; 0x1f96 <main+0x196>
    1ec2:	84 36       	cpi	r24, 0x64	; 100
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <main+0xc8>
    1ec6:	3d c0       	rjmp	.+122    	; 0x1f42 <main+0x142>
    1ec8:	6d d0       	rcall	.+218    	; 0x1fa4 <getch>
    1eca:	6c d0       	rcall	.+216    	; 0x1fa4 <getch>
    1ecc:	e8 2e       	mov	r14, r24
    1ece:	6a d0       	rcall	.+212    	; 0x1fa4 <getch>
    1ed0:	81 14       	cp	r8, r1
    1ed2:	88 e1       	ldi	r24, 0x18	; 24
    1ed4:	98 06       	cpc	r9, r24
    1ed6:	30 f4       	brcc	.+12     	; 0x1ee4 <main+0xe4>
    1ed8:	f4 01       	movw	r30, r8
    1eda:	f7 be       	out	0x37, r15	; 55
    1edc:	e8 95       	spm
    1ede:	00 e0       	ldi	r16, 0x00	; 0
    1ee0:	11 e0       	ldi	r17, 0x01	; 1
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <main+0xe8>
    1ee4:	00 e0       	ldi	r16, 0x00	; 0
    1ee6:	11 e0       	ldi	r17, 0x01	; 1
    1ee8:	5d d0       	rcall	.+186    	; 0x1fa4 <getch>
    1eea:	f8 01       	movw	r30, r16
    1eec:	81 93       	st	Z+, r24
    1eee:	8f 01       	movw	r16, r30
    1ef0:	ee 12       	cpse	r14, r30
    1ef2:	fa cf       	rjmp	.-12     	; 0x1ee8 <main+0xe8>
    1ef4:	81 14       	cp	r8, r1
    1ef6:	f8 e1       	ldi	r31, 0x18	; 24
    1ef8:	9f 06       	cpc	r9, r31
    1efa:	18 f0       	brcs	.+6      	; 0x1f02 <main+0x102>
    1efc:	f4 01       	movw	r30, r8
    1efe:	f7 be       	out	0x37, r15	; 55
    1f00:	e8 95       	spm
    1f02:	5b d0       	rcall	.+182    	; 0x1fba <verifySpace>
    1f04:	07 b6       	in	r0, 0x37	; 55
    1f06:	00 fc       	sbrc	r0, 0
    1f08:	fd cf       	rjmp	.-6      	; 0x1f04 <main+0x104>
    1f0a:	f4 01       	movw	r30, r8
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b1 e0       	ldi	r27, 0x01	; 1
    1f10:	8c 91       	ld	r24, X
    1f12:	11 96       	adiw	r26, 0x01	; 1
    1f14:	2c 91       	ld	r18, X
    1f16:	11 97       	sbiw	r26, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	92 2b       	or	r25, r18
    1f1c:	12 96       	adiw	r26, 0x02	; 2
    1f1e:	0c 01       	movw	r0, r24
    1f20:	d7 be       	out	0x37, r13	; 55
    1f22:	e8 95       	spm
    1f24:	11 24       	eor	r1, r1
    1f26:	32 96       	adiw	r30, 0x02	; 2
    1f28:	a0 34       	cpi	r26, 0x40	; 64
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	b8 07       	cpc	r27, r24
    1f2e:	81 f7       	brne	.-32     	; 0x1f10 <main+0x110>
    1f30:	f4 01       	movw	r30, r8
    1f32:	c7 be       	out	0x37, r12	; 55
    1f34:	e8 95       	spm
    1f36:	07 b6       	in	r0, 0x37	; 55
    1f38:	00 fc       	sbrc	r0, 0
    1f3a:	fd cf       	rjmp	.-6      	; 0x1f36 <main+0x136>
    1f3c:	b7 be       	out	0x37, r11	; 55
    1f3e:	e8 95       	spm
    1f40:	2a c0       	rjmp	.+84     	; 0x1f96 <main+0x196>
    1f42:	84 37       	cpi	r24, 0x74	; 116
    1f44:	b9 f4       	brne	.+46     	; 0x1f74 <main+0x174>
    1f46:	2e d0       	rcall	.+92     	; 0x1fa4 <getch>
    1f48:	2d d0       	rcall	.+90     	; 0x1fa4 <getch>
    1f4a:	e8 2e       	mov	r14, r24
    1f4c:	2b d0       	rcall	.+86     	; 0x1fa4 <getch>
    1f4e:	35 d0       	rcall	.+106    	; 0x1fba <verifySpace>
    1f50:	f4 01       	movw	r30, r8
    1f52:	a8 2c       	mov	r10, r8
    1f54:	ae 0c       	add	r10, r14
    1f56:	8f 01       	movw	r16, r30
    1f58:	0f 5f       	subi	r16, 0xFF	; 255
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	84 91       	lpm	r24, Z+
    1f5e:	1e d0       	rcall	.+60     	; 0x1f9c <putch>
    1f60:	f8 01       	movw	r30, r16
    1f62:	a0 12       	cpse	r10, r16
    1f64:	f8 cf       	rjmp	.-16     	; 0x1f56 <main+0x156>
    1f66:	ff ef       	ldi	r31, 0xFF	; 255
    1f68:	8f 1a       	sub	r8, r31
    1f6a:	9f 0a       	sbc	r9, r31
    1f6c:	ea 94       	dec	r14
    1f6e:	8e 0c       	add	r8, r14
    1f70:	91 1c       	adc	r9, r1
    1f72:	11 c0       	rjmp	.+34     	; 0x1f96 <main+0x196>
    1f74:	85 37       	cpi	r24, 0x75	; 117
    1f76:	41 f4       	brne	.+16     	; 0x1f88 <main+0x188>
    1f78:	20 d0       	rcall	.+64     	; 0x1fba <verifySpace>
    1f7a:	8e e1       	ldi	r24, 0x1E	; 30
    1f7c:	0f d0       	rcall	.+30     	; 0x1f9c <putch>
    1f7e:	83 e9       	ldi	r24, 0x93	; 147
    1f80:	0d d0       	rcall	.+26     	; 0x1f9c <putch>
    1f82:	87 e0       	ldi	r24, 0x07	; 7
    1f84:	0b d0       	rcall	.+22     	; 0x1f9c <putch>
    1f86:	07 c0       	rjmp	.+14     	; 0x1f96 <main+0x196>
    1f88:	81 35       	cpi	r24, 0x51	; 81
    1f8a:	21 f4       	brne	.+8      	; 0x1f94 <main+0x194>
    1f8c:	88 e0       	ldi	r24, 0x08	; 8
    1f8e:	11 d0       	rcall	.+34     	; 0x1fb2 <watchdogConfig>
    1f90:	14 d0       	rcall	.+40     	; 0x1fba <verifySpace>
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <main+0x196>
    1f94:	12 d0       	rcall	.+36     	; 0x1fba <verifySpace>
    1f96:	80 e1       	ldi	r24, 0x10	; 16
    1f98:	01 d0       	rcall	.+2      	; 0x1f9c <putch>
    1f9a:	63 cf       	rjmp	.-314    	; 0x1e62 <main+0x62>

00001f9c <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    1f9c:	5d 9b       	sbis	0x0b, 5	; 11
    1f9e:	fe cf       	rjmp	.-4      	; 0x1f9c <putch>
  UDR0 = ch;
    1fa0:	8c b9       	out	0x0c, r24	; 12
    1fa2:	08 95       	ret

00001fa4 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    1fa4:	5f 9b       	sbis	0x0b, 7	; 11
    1fa6:	fe cf       	rjmp	.-4      	; 0x1fa4 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    1fa8:	5c 99       	sbic	0x0b, 4	; 11
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1fac:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    1fae:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1fb0:	08 95       	ret

00001fb2 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1fb2:	98 e1       	ldi	r25, 0x18	; 24
    1fb4:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1fb6:	81 bd       	out	0x21, r24	; 33
    1fb8:	08 95       	ret

00001fba <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1fba:	f4 df       	rcall	.-24     	; 0x1fa4 <getch>
    1fbc:	80 32       	cpi	r24, 0x20	; 32
    1fbe:	19 f0       	breq	.+6      	; 0x1fc6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fc0:	88 e0       	ldi	r24, 0x08	; 8
    1fc2:	f7 df       	rcall	.-18     	; 0x1fb2 <watchdogConfig>
    1fc4:	ff cf       	rjmp	.-2      	; 0x1fc4 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fc6:	84 e1       	ldi	r24, 0x14	; 20
    1fc8:	e9 cf       	rjmp	.-46     	; 0x1f9c <putch>

00001fca <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1fca:	cf 93       	push	r28
    1fcc:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fce:	ea df       	rcall	.-44     	; 0x1fa4 <getch>
    1fd0:	c1 50       	subi	r28, 0x01	; 1
    1fd2:	e9 f7       	brne	.-6      	; 0x1fce <getNch+0x4>
  verifySpace();
}
    1fd4:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fd6:	f1 cf       	rjmp	.-30     	; 0x1fba <verifySpace>

00001fd8 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	eb df       	rcall	.-42     	; 0x1fb2 <watchdogConfig>
  __asm__ __volatile__ (
    1fdc:	ee 27       	eor	r30, r30
    1fde:	ff 27       	eor	r31, r31
    1fe0:	09 94       	ijmp
